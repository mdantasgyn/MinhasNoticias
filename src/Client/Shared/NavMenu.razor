@inject Microsoft.Extensions.Localization.IStringLocalizer<NavMenu> _localizer
@using System.Security.Claims

@*<UserCard />*@
<MudCard Elevation="0" Square="true" Style="background-color: transparent">
    <MudCardContent Class="d-flex flex-column justify-center py-3">
        <MudAvatar Color="Color.Transparent" Class="align-self-center pa-4" Image="/images/icon-512.png" Style="height:70px; width:70px;"> </MudAvatar>
        <MudText Typo="Typo.h6" Align="Align.Center" Class="mt-1" Style="font-weight: 700;" Color="Color.Primary">Minhas Noticias</MudText>
        <MudText Typo="Typo.caption" Align="Align.Center" Style="font-weight: 600;" Color="Color.Error">v2.1.0</MudText>
    </MudCardContent>
</MudCard>

<MudDivider Class="mb-3 mx-3"></MudDivider>

<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home" IconColor="Color.Primary">@_localizer["Home"]</MudNavLink>
    <MudNavLink Href="/noticias" Target="_blank" Icon="@Icons.Material.Outlined.Newspaper" IconColor="Color.Tertiary">
        Notícias
    </MudNavLink>
    <MudNavLink Href="/noticias" Target="_blank" Icon="@Icons.Material.Outlined.Subject" IconColor="Color.Tertiary">
        Sugestões
    </MudNavLink>
    <MudNavLink Href="/noticias" Target="_blank" Icon="@Icons.Material.Outlined.QuestionAnswer" IconColor="Color.Tertiary">
        Enquetes
    </MudNavLink>

    @if (_canViewUsers || _canViewRoles)
    {
        <MudListSubheader Class="mt-2 mb-n2">@_localizer["Administrador"]</MudListSubheader>
        @if (_canViewUsers)
        {
            <MudNavLink Href="/identity/users" Icon="@Icons.Material.Outlined.Person" IconColor="Color.Success">
                @_localizer["Usuários"]
            </MudNavLink>
        }
        @if (_canViewRoles)
        {
            <MudNavLink Href="/identity/roles" Icon="@Icons.Material.Outlined.SupervisedUserCircle" IconColor="Color.Default">
                @_localizer["Funções"]
            </MudNavLink>
        }
    }
    <MudDivider Class="mt-3 mb-6 mx-3"></MudDivider>
</MudNavMenu>

@code {
    private ClaimsPrincipal _authenticationStateProviderUser;

    private bool _canViewHangfire;
    private bool _canViewDashboards;
    private bool _canViewDocuments;
    private bool _canViewDocumentTypes;
    private bool _canViewAuditTrails;
    private bool _canViewRoles;
    private bool _canViewUsers;
    private bool _canViewChat;
    private bool _canViewProducts;
    private bool _canViewBrands;

    protected override async Task OnParametersSetAsync()
    {
        _authenticationStateProviderUser = await _stateProvider.GetAuthenticationStateProviderUserAsync();
        _canViewHangfire = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Hangfire.View)).Succeeded;
        _canViewDashboards = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Dashboards.View)).Succeeded;
        _canViewDocuments = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Documents.View)).Succeeded;
        _canViewDocumentTypes = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.DocumentTypes.View)).Succeeded;
        _canViewAuditTrails = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.AuditTrails.View)).Succeeded;
        _canViewRoles = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Roles.View)).Succeeded;
        _canViewUsers = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Users.View)).Succeeded;
        _canViewChat = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Communication.Chat)).Succeeded;
    }
}