@page "/components/charts"
@using MinhasNoticias.Application.Models
@inject Microsoft.Extensions.Localization.IStringLocalizer<Charts> _localizer

<MudText Color="Color.Default" Class="mt-1 mb-1" Typo="Typo.h6"> Bar Chart </MudText>
<MudText Color="Color.Default" Typo="Typo.caption"> There are five severity levels that each set a different icon and a color. </MudText>
<div>
    <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" @bind-SelectedIndex="Index1" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
</div>
<MudText Typo="Typo.h6">Selected portion of the chart: @Index1</MudText>

<MudText Color="Color.Default" Class="mt-5 mb-1" Typo="Typo.h6"> Donut Chart </MudText>
<MudText Color="Color.Default" Typo="Typo.caption"> The default variant is normal. In addition to that, outlined and filled is available. </MudText>
<MudPaper Class="pa-4 mt-3 mb-3">
    <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" @bind-SelectedIndex="Index2" InputData="@data" InputLabels="@labels"></MudChart>
</MudPaper>
<MudPaper Class="pa-4 mt-2 d-flex justify-center">
    <MudButton OnClick="AddDataSize" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
    <MudButton @onclick="RandomizeData1" Variant="Variant.Filled" Class="mx-4">Randomize</MudButton>
    <MudButton OnClick="RemoveDataSize" Variant="Variant.Filled" Color="Color.Secondary">Remove</MudButton>
</MudPaper>
<MudText Typo="Typo.h6">Selected portion of the chart: @Index2</MudText>

<MudText Color="Color.Default" Class="mt-5 mb-1" Typo="Typo.h6"> Line Chart </MudText>
<MudText Color="Color.Default" Typo="Typo.caption"> Taking up too much space? Set the Dense property to true. It removes the vertical padding and lowers the horizontal. </MudText>
<div>
    <MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index3" XAxisLabels="@XAxisLabels1" Width="100%" Height="350px"></MudChart>
    <MudButton @onclick="RandomizeData2">Randomize Data</MudButton>
    <MudText Typo="Typo.h6">Selected portion of the chart: @Index3</MudText>
</div>

<MudChart ChartType="ChartType.Line" ChartSeries="@Series3" XAxisLabels="@XAxisLabels2" Width="100%" Height="350px"></MudChart>

<div>
    <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels3" Width="100%" Height="350" ChartOptions="options"></MudChart>
    <MudButton @onclick="RandomizeData3">Randomize Data</MudButton>
    <MudMenu Label="Interpolation Algorithm" FullWidth="true">
        <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.NaturalSpline)">Natural Spline</MudMenuItem>
        <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.EndSlope)">End Slope</MudMenuItem>
        <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.Periodic)">Periodic</MudMenuItem>
    </MudMenu>
</div>


<MudText Color="Color.Default" Class="mt-5 mb-1" Typo="Typo.h6"> Pie Chart </MudText>
<MudPaper Class="pa-4">
    <MudChart ChartType="ChartType.Pie" InputData="@data4" @bind-SelectedIndex="Index4" InputLabels="@labels4" Width="300px" Height="300px" />
</MudPaper>
<MudPaper Class="pa-4 mt-2 d-flex justify-center">
    <MudButton OnClick="AddDataSize" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
    <MudButton @onclick="RandomizeData4" Variant="Variant.Filled" Class="mx-4">Randomize</MudButton>
    <MudButton OnClick="RemoveDataSize4" Variant="Variant.Filled" Color="Color.Secondary">Remove</MudButton>
</MudPaper>
<MudText Typo="Typo.h6">Selected portion of the chart: @Index4</MudText>


@code {
    //Bar Chart
    private int Index1 = -1; //default value cannot be 0 -> first selectedindex is 0.

    public List<ChartSeries> Series = new List<ChartSeries>()
{
        new ChartSeries() { Name = "United States", Data = new double[] { 40, 20, 25, 27, 46, 60, 48, 80, 15 } },
        new ChartSeries() { Name = "Germany", Data = new double[] { 19, 24, 35, 13, 28, 15, 13, 16, 31 } },
        new ChartSeries() { Name = "Sweden", Data = new double[] { 8, 6, 11, 13, 4, 16, 10, 16, 18 } },
    };
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };

    //Dotnut Chart
    private int Index2 = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 4;
    public double[] data = { 50, 25, 20, 5 };
    public string[] labels = { "Fossile", "Nuclear", "Solar", "Wind", "Oil", "Coal", "Gas", "Biomass",
                                "Hydro", "Geothermal", "Fossil", "Nuclear", "Solar", "Wind", "Oil",
                                "Coal", "Gas", "Biomass", "Hydro", "Geothermal" };

    Random random1 = new Random();

    void RandomizeData1()
    {
        var new_data = new double[dataSize];
        for (int i = 0; i < new_data.Length; i++)
            new_data[i] = random1.NextDouble() * 100;
        data = new_data;
        StateHasChanged();
    }

    void AddDataSize()
    {
        if (dataSize < 20)
        {
            dataSize = dataSize + 1;
            RandomizeData1();
        }
    }
    void RemoveDataSize()
    {
        if (dataSize > 0)
        {
            dataSize = dataSize - 1;
            RandomizeData1();
        }
    }

    //Line Chart 1
    private int Index3 = -1; //default value cannot be 0 -> first selectedindex is 0.

    public List<ChartSeries> Series2 = new List<ChartSeries>()
{
        new ChartSeries() { Name = "Series 1", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
        new ChartSeries() { Name = "Series 2", Data = new double[] { 10, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
    public string[] XAxisLabels1 = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };

    Random random2 = new Random();
    public void RandomizeData2()
    {
        var new_series = new List<ChartSeries>()
{
            new ChartSeries() { Name = "Series 1", Data = new double[9] },
            new ChartSeries() { Name = "Series 2", Data = new double[9] },
        };
        for (int i = 0; i < 9; i++)
        {
            new_series[0].Data[i] = random2.NextDouble() * 100;
            new_series[1].Data[i] = random2.NextDouble() * 100;
        }
        Series2 = new_series;
        StateHasChanged();
    }

    //Line Chart 2
    public List<ChartSeries> Series3 = new List<ChartSeries>();
    public ChartOptions Options = new ChartOptions();
    public string[] XAxisLabels2 = { "1986-04-20", "1986-04-21", "1986-04-22", "1986-04-23", "1986-04-24", "1986-04-25", "1986-04-26" };
    protected override void OnInitialized()
    {
        double[] Data1 = { 65, 68, 70, 74, 74, 72, 74 };
        double[] Data2 = { 88, 90, 91, 92, 91, 90, 90 };
        double[] Data3 = { 89, 91, 92, 92, 92, 92, 91 };
        double[] Data4 = { 85, 86, 90, 90, 92, 99, 0 };


        Series3.Add(new ChartSeries() { Name = "Chernobyl-1", Data = Data1 });
        Series3.Add(new ChartSeries() { Name = "Chernobyl-2", Data = Data2 });
        Series3.Add(new ChartSeries() { Name = "Chernobyl-3", Data = Data3 });
        Series3.Add(new ChartSeries() { Name = "Chernobyl-4", Data = Data4 });

        Options.YAxisTicks = 400;

        StateHasChanged();

        options.InterpolationOption = InterpolationOption.NaturalSpline;
        options.YAxisFormat = "c2";
    }

    //Line chart 3
    private ChartOptions options = new ChartOptions();
    public List<ChartSeries> Series4 = new List<ChartSeries>()
{
        new ChartSeries() { Name = "Series 1", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
        new ChartSeries() { Name = "Series 2", Data = new double[] { 35, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
    public string[] XAxisLabels3 = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };

    Random random = new Random();

    public void RandomizeData3()
    {
        var new_series = new List<ChartSeries>()
{
            new ChartSeries() { Name = "Series 1", Data = new double[9] },
            new ChartSeries() { Name = "Series 2", Data = new double[9] },
        };
        for (int i = 0; i < 9; i++)
        {
            new_series[0].Data[i] = random.NextDouble() * 100;
            new_series[1].Data[i] = random.NextDouble() * 100;
        }
        Series4 = new_series;
        StateHasChanged();
    }

    void OnClickMenu(InterpolationOption interpolationOption)
    {
        options.InterpolationOption = interpolationOption;
        StateHasChanged();
    }

    //Pie Chart
    private int Index4 = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize4 = 4;
    double[] data4 = { 77, 25, 20, 5 };
    string[] labels4 = { "Uranium", "Plutonium", "Thorium", "Caesium", "Technetium", "Promethium",
                        "Polonium", "Astatine", "Radon", "Francium", "Radium", "Actinium", "Protactinium",
                        "Neptunium", "Americium", "Curium", "Berkelium", "Californium", "Einsteinium", "Mudblaznium" };

    Random random4 = new Random();

    void RandomizeData4()
    {
        var new_data = new double[dataSize4];
        for (int i = 0; i < new_data.Length; i++)
            new_data[i] = random.NextDouble() * 100;
        data4 = new_data;
        StateHasChanged();
    }

    void AddDataSize4()
    {
        if (dataSize4 < 20)
        {
            dataSize4 = dataSize4 + 1;
            RandomizeData4();
        }
    }
    void RemoveDataSize4()
    {
        if (dataSize4 > 0)
        {
            dataSize4 = dataSize4 - 1;
            RandomizeData4();
        }
    }
}


