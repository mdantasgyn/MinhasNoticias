@page "/components/progress"
@using MinhasNoticias.Application.Models
@inject Microsoft.Extensions.Localization.IStringLocalizer<Progress> _localizer
@using System;
@using System.Threading;

@implements IDisposable;

<MudText Color="Color.Default" Class="mt-1 mb-1" Typo="Typo.h6"> Circular </MudText>
<MudText Color="Color.Default" Typo="Typo.caption"> Circular indeterminate </MudText>
<MudGrid Class="my-3" Spacing="1">
    <MudItem xs="12">
        <MudText Color="Color.Default" Typo="Typo.subtitle1"> Circular indeterminate </MudText>
    </MudItem>
    <MudItem xs="12">
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
        <MudProgressCircular Color="Color.Success" Indeterminate="true" />
        <MudProgressCircular Color="Color.Info" Indeterminate="true" />
    </MudItem>
    <MudItem xs="12">
        <MudText Color="Color.Default" Typo="Typo.subtitle1"> Circular determinate </MudText>
    </MudItem>
    <MudItem xs="12">
        <MudProgressCircular Color="Color.Default" Value="@Value" />
        <MudProgressCircular Color="Color.Primary" Value="@Value" />
        <MudProgressCircular Color="Color.Secondary" Value="@Value" />
        <MudProgressCircular Color="Color.Success" Value="@Value" />
        <MudProgressCircular Color="Color.Info" Value="@Value" />
    </MudItem>
    <MudItem xs="12">
        <MudText Color="Color.Default" Typo="Typo.subtitle1"> Circular Sizes </MudText>
    </MudItem>
    <MudItem xs="12">
        <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
        <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
    </MudItem>
</MudGrid>

<MudText Color="Color.Default" Class="mt-3 mb-1" Typo="Typo.h6"> Linear </MudText>
<MudGrid Class="my-3" Spacing="1">
    <MudItem xs="12">
        <MudText Color="Color.Default" Typo="Typo.subtitle1"> Linear indeterminate </MudText>
    </MudItem>
    <MudItem xs="12">
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
    </MudItem>
    <MudItem xs="12">
        <MudText Color="Color.Default" Typo="Typo.subtitle1"> Linear determinate </MudText>
    </MudItem>
    <MudItem xs="12">
        <MudProgressLinear Color="Color.Primary" Value="@Value" Class="my-7" />
        <MudProgressLinear Color="Color.Secondary" Value="@Value" Class="my-7" />
    </MudItem>
    <MudItem xs="12">
        <MudText Color="Color.Default" Typo="Typo.subtitle1"> Min and Max </MudText>
    </MudItem>
    <MudItem xs="12">
        <MudProgressLinear Color="Color.Success" Value="-2" Min="-7" Max="7" />
        <MudProgressLinear Color="Color.Info" Value="17.75" Min="17.0" Max="18.0" Class="my-7" />
        <MudProgressLinear Color="Color.Error" Value="100" Min="0" Max="100" />
    </MudItem>
    <MudItem xs="12">
        <MudText Color="Color.Default" Typo="Typo.subtitle1"> Linear buffer </MudText>
    </MudItem>
    <MudItem xs="12">
        <MudProgressLinear Color="Color.Primary" Buffer="true" Value="@Value" BufferValue="@BufferValue" />
        <MudProgressLinear Color="Color.Secondary" Buffer="true" Value="@Value" BufferValue="@BufferValue" Class="my-7" />
    </MudItem>
</MudGrid>


@code {
    public int Value { get; set; }
    public int BufferValue { get; set; }

    public async void StartTimerAsync()
    {
        if (disposed)
            return;
        Value = 0;
        while (Value < 100)
        {
            Value = Value + 4;
            StateHasChanged();
            await Task.Delay(500);
            if (disposed)
                return;
        }
        Value = 0;
        StartTimerAsync();
    }
    protected override void OnInitialized()
        => StartTimerAsync();

    bool disposed;
    public void Dispose()
    {
        disposed = true;
    }

    public async void StartTimerAsync1()
    {
        if (disposed)
            return;
        Value = 100;
        BufferValue = 100;
        while (Value > 0)
        {
            Value = Value - 4;
            BufferValue = BufferValue - 5;
            StateHasChanged();
            await Task.Delay(500);
            if (disposed)
                return;
        }
        Value = 100;
        BufferValue = 100;
        StartTimerAsync();
    }
}


